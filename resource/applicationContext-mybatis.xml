<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Spring+Mybatis整合的配置文件 -->
	<!-- 1、 读取database.properties配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:database.properties"/>
	</bean>
	<!-- 2 、配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>
	<!-- 3、创建 SqlSessionFactoryBean的实例对象 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 1、引入数据源对象 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 2、引入mybatis-config.xml配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 3、引入Mapper映射文件 -->
		<!-- <property name="mapperLocations">
			<list>
				<value>classpath:dao/*.xml</value>
			</list>
		</property> -->
	</bean>
	<!-- 4、使用MapperScannerConfigurer去简化DAO层的配置
			好处：1、自动为cn.wj.dao下的所有接口创建其接口实现类以及实现类的bean实例对象。
				2、自动创建SqlSessionTemplate实例对象，并把这个对象注入给实现类的bean实例对象。
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.appsys.dao"/>
	</bean>
	
	<!-- 5、使用注解去简化Service层的配置：@Service|@Resource -->
	<context:component-scan base-package="cn.appsys.service"/>
</beans>